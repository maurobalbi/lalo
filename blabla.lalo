import module  //imported from src/module
import module1 as m // import qualified

let x = 1;

let multiply = fn(@T, a: T, b: T) -> T {
  a + b
}

multiply(1,2)

multiply(@Int, 1, 3)

data Cat = Cat {
  name: String,
  age: Int
}

data Generic(T) = Generig {type: T}

data Animal = Dog {name: String} | Parrot {color: String}

data Maybe(T) = Nothing | Just {value:T}

trait Functor(f) {
  fmap: (a -> b) -> f(a) -> f(b)
}

impl Functor(Maybe) {
  fmap(f, a) = case a {
    Nothing -> Nothing
    Just {value} -> Just {value: f(value)}
  }
}