import module  //imported from src/module
import module1 as m // import qualified

multiply : Num t => t -> t -> t
fn multiply<T: Num>(a: T, b: T) -> T {
  a + b
}

multiply(1)     \\ \b -> { 1 + b }
multiply(2, 2)  \\ 4

multiply @Int 1 2

data Cat = Cat {
  name: String,
  age: Int
}

data Generic<T> = Generic(T)

data Animal = Dog(String) | Parrot(String)
data Maybe<T> = Nothing | Just(T)

trait Functor<F> {
  fn fmap: (a -> b) -> F(a) -> F(b)
}

impl Functor<Maybe> {
  fmap(f, a) = case a {
    Nothing -> Nothing
    Just(a) -> Just(f(a))
  }
}