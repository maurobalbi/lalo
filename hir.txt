#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
mod lexer {








    use crate::error::ParseError;
    use crate::token::{};
    use crate::token::Kind;
    use crate::token::Token;
    use crate::token::NumberLiteral;
    pub struct Lexer<'a> {
        cursor: usize,
        source: &'a str,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl <'a> ::core::fmt::Debug for Lexer {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (*(self as &lexer::Lexer) as
                                                 lexer::Lexer) {
                                           Lexer {
                                           cursor: ref __self_0_0,
                                           source: ref __self_0_1 } => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_struct(("Lexer"
                                                                                                   as
                                                                                                   &str))
                                                       as
                                                       std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("cursor"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0_0
                                                                                               as
                                                                                               &usize)
                                                                                             as
                                                                                             usize)
                                                                                           as
                                                                                           &usize)
                                                                                         as
                                                                                         &&usize))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("source"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0_1
                                                                                               as
                                                                                               &&str)
                                                                                             as
                                                                                             &str)
                                                                                           as
                                                                                           &&str)
                                                                                         as
                                                                                         &&&str))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugStruct).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl <'a> ::core::clone::Clone for Lexer {
        #[inline]
        fn clone(self: &Self)
         ->
             Lexer ({
                        (match (*(self as &lexer::Lexer) as lexer::Lexer) {
                             Lexer {
                             cursor: ref __self_0_0, source: ref __self_0_1 }
                             =>
                             (Lexer{cursor:
                                        ((::core::clone::Clone::clone as
                                             for<'r> fn(&'r usize) -> usize {<usize as std::clone::Clone>::clone})((&(*(__self_0_0
                                                                                                                           as
                                                                                                                           &usize)
                                                                                                                         as
                                                                                                                         usize)
                                                                                                                       as
                                                                                                                       &usize))
                                            as usize),
                                    source:
                                        ((::core::clone::Clone::clone as
                                             for<'r> fn(&'r &str) -> &str {<&str as std::clone::Clone>::clone})((&(*(__self_0_1
                                                                                                                        as
                                                                                                                        &&str)
                                                                                                                      as
                                                                                                                      &str)
                                                                                                                    as
                                                                                                                    &&str))
                                            as &str),} as lexer::Lexer),
                         } as lexer::Lexer)
                    } as lexer::Lexer)
    }
    impl <'a> Lexer {
        pub fn new(source: &'a str)
         ->
             Self ({
                       (Self{cursor: (0 as usize), (source as &str),} as
                           lexer::Lexer)
                   } as lexer::Lexer)
        fn next_number_literal<I>(self: &mut Self, it: &mut I, start: usize)
         -> Result<Option<Token>, ParseError> where I: Clone + Iterator<Item =
         (usize,
          char)> ({
                      let number =
                          (match (((it as &mut I).clone() as I).next() as
                                     std::option::Option<(usize, char)>) {
                               _ =>
                               (NumberLiteral::Decimal as
                                   token::NumberLiteral),
                           } as token::NumberLiteral);
                      (((self as &mut lexer::Lexer).cursor as usize) =
                          (loop  {
                               (break
                                   (match ((it as &mut I).next() as
                                              std::option::Option<(usize, char)>)
                                        {
                                        Some((n, c)) => {
                                            (match ({
                                                        let _t =
                                                            ((char::is_alphanumeric
                                                                 as
                                                                 fn(char) -> bool {std::char::methods::<impl char>::is_alphanumeric})((c
                                                                                                                                          as
                                                                                                                                          char))
                                                                as bool);
                                                        _t
                                                    } as bool) {
                                                 (true as bool) => {
                                                     (continue  as !);
                                                 }
                                                 _ => {
                                                     (((self as
                                                           &mut lexer::Lexer).cursor
                                                          as usize) +
                                                         (n as usize) as
                                                         usize)
                                                 }
                                             } as usize)
                                        }
                                        None =>
                                        (((self as &mut lexer::Lexer).source
                                             as &str).len() as usize),
                                    } as usize)  as !);
                           } as usize) as ());
                      (return ((Ok as
                                   fn(std::option::Option<token::Token>) -> std::result::Result<std::option::Option<token::Token>, error::ParseError> {std::result::Result::<std::option::Option<token::Token>, error::ParseError>::Ok})(((Some
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              fn(token::Token) -> std::option::Option<token::Token> {std::option::Option::<token::Token>::Some})((Token{kind:
                                                                                                                                                                                                                                                                                                                                                            (Kind::NumberLiteral{(number
                                                                                                                                                                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                                                                                                                                                                     token::NumberLiteral),}
                                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                                token::Kind),}
                                                                                                                                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                                                                                                                                     token::Token))
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             std::option::Option<token::Token>))
                                  as
                                  std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                          as !);
                  } as !)
        pub fn next(self: &mut Self)
         ->
             Result<Option<Token>,
                    ParseError> ({
                                     let mut it =
                                         (((self as &mut lexer::Lexer).source
                                              as &str).char_indices() as
                                             std::str::CharIndices);
                                     (loop  {
                                          (match ((it as
                                                      std::str::CharIndices).next()
                                                     as
                                                     std::option::Option<(usize, char)>)
                                               {
                                               Some((start, c)) => {
                                                   (match ({
                                                               let _t =
                                                                   ((char::is_whitespace
                                                                        as
                                                                        fn(char) -> bool {std::char::methods::<impl char>::is_whitespace})((c
                                                                                                                                               as
                                                                                                                                               char))
                                                                       as
                                                                       bool);
                                                               _t
                                                           } as bool) {
                                                        (true as bool) => {
                                                            (continue  as !);
                                                        }
                                                        _ => { }
                                                    } as ())
                                                   let kind =
                                                       (loop  {
                                                            (break
                                                                (match (c as
                                                                           char)
                                                                     {
                                                                     ('+' as
                                                                         char)
                                                                     =>
                                                                     (Kind::Plus
                                                                         as
                                                                         token::Kind),
                                                                     ('-' as
                                                                         char)
                                                                     =>
                                                                     (Kind::Minus
                                                                         as
                                                                         token::Kind),
                                                                     ('/' as
                                                                         char)
                                                                     =>
                                                                     (Kind::Slash
                                                                         as
                                                                         token::Kind),
                                                                     ('*' as
                                                                         char)
                                                                     =>
                                                                     (Kind::Star
                                                                         as
                                                                         token::Kind),
                                                                     ('0' as
                                                                         char)
                                                                     ...('9'
                                                                            as
                                                                            char)
                                                                     => {
                                                                         (return ((self
                                                                                      as
                                                                                      &mut lexer::Lexer).next_number_literal((&mut (it
                                                                                                                                       as
                                                                                                                                       std::str::CharIndices)
                                                                                                                                 as
                                                                                                                                 &mut std::str::CharIndices),
                                                                                                                             (start
                                                                                                                                 as
                                                                                                                                 usize))
                                                                                     as
                                                                                     std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                                                                             as
                                                                             !);
                                                                     }
                                                                     _ => {
                                                                         (return ((Err
                                                                                      as
                                                                                      fn(error::ParseError) -> std::result::Result<std::option::Option<token::Token>, error::ParseError> {std::result::Result::<std::option::Option<token::Token>, error::ParseError>::Err})((ParseError::UnexpectedChar{(c
                                                                                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                                                                                             char),}
                                                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                                                 error::ParseError))
                                                                                     as
                                                                                     std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                                                                             as
                                                                             !);
                                                                     }
                                                                 } as
                                                                    token::Kind)
                                                                 as !);
                                                        } as token::Kind);
                                                   (return ((Ok as
                                                                fn(std::option::Option<token::Token>) -> std::result::Result<std::option::Option<token::Token>, error::ParseError> {std::result::Result::<std::option::Option<token::Token>, error::ParseError>::Ok})(((Some
                                                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                                                           fn(token::Token) -> std::option::Option<token::Token> {std::option::Option::<token::Token>::Some})((Token{(kind
                                                                                                                                                                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                                                                                                                                                                         token::Kind),}
                                                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                                                  token::Token))
                                                                                                                                                                                                                                                                          as
                                                                                                                                                                                                                                                                          std::option::Option<token::Token>))
                                                               as
                                                               std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                                                       as !);
                                               }
                                               _ => (break  as !),
                                           } as ())
                                      } as ())
                                     ((Ok as
                                          fn(std::option::Option<token::Token>) -> std::result::Result<std::option::Option<token::Token>, error::ParseError> {std::result::Result::<std::option::Option<token::Token>, error::ParseError>::Ok})((None
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    std::option::Option<token::Token>))
                                         as
                                         std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                                 } as
                                    std::result::Result<std::option::Option<token::Token>, error::ParseError>)
    }
}
mod token {
    use std::fmt;
    pub enum NumberLiteral { Decimal, }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for NumberLiteral {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (((&(*(self as
                                                       &token::NumberLiteral)
                                                     as token::NumberLiteral)
                                                   as &token::NumberLiteral),)
                                                 as (&token::NumberLiteral,))
                                           {
                                           (&NumberLiteral::Decimal,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("Decimal"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for NumberLiteral {
        #[inline]
        fn clone(self: &Self)
         ->
             NumberLiteral ({
                                ({
                                     (*(self as &token::NumberLiteral) as
                                         token::NumberLiteral)
                                 } as token::NumberLiteral)
                            } as token::NumberLiteral)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for NumberLiteral { }
    impl ::core::marker::StructuralPartialEq for NumberLiteral { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialEq for NumberLiteral {
        #[inline]
        fn eq(self: &Self, other: &NumberLiteral)
         ->
             bool ({
                       (match (((&(*(self as &token::NumberLiteral) as
                                      token::NumberLiteral) as
                                    &token::NumberLiteral),
                                (&(*(other as &token::NumberLiteral) as
                                      token::NumberLiteral) as
                                    &token::NumberLiteral)) as
                                  (&token::NumberLiteral, &token::NumberLiteral))
                            {
                            _ => (true as bool),
                        } as bool)
                   } as bool)
    }
    impl ::core::marker::StructuralEq for NumberLiteral { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Eq for NumberLiteral {
        #[inline]
        #[doc(hidden)]
        fn assert_receiver_is_total_eq(self: &Self)
         -> () ({ ({ } as ()) } as ())
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialOrd for NumberLiteral {
        #[inline]
        fn partial_cmp(self: &Self, other: &NumberLiteral)
         ->
             ::core::option::Option<::core::cmp::Ordering> ({
                                                                (match (((&(*(self
                                                                                 as
                                                                                 &token::NumberLiteral)
                                                                               as
                                                                               token::NumberLiteral)
                                                                             as
                                                                             &token::NumberLiteral),
                                                                         (&(*(other
                                                                                 as
                                                                                 &token::NumberLiteral)
                                                                               as
                                                                               token::NumberLiteral)
                                                                             as
                                                                             &token::NumberLiteral))
                                                                           as
                                                                           (&token::NumberLiteral, &token::NumberLiteral))
                                                                     {
                                                                     _ =>
                                                                     ((::core::option::Option::Some
                                                                          as
                                                                          fn(std::cmp::Ordering) -> std::option::Option<std::cmp::Ordering> {std::option::Option::<std::cmp::Ordering>::Some})((::core::cmp::Ordering::Equal
                                                                                                                                                                                                   as
                                                                                                                                                                                                   std::cmp::Ordering))
                                                                         as
                                                                         std::option::Option<std::cmp::Ordering>),
                                                                 } as
                                                                    std::option::Option<std::cmp::Ordering>)
                                                            } as
                                                               std::option::Option<std::cmp::Ordering>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Ord for NumberLiteral {
        #[inline]
        fn cmp(self: &Self, other: &NumberLiteral)
         ->
             ::core::cmp::Ordering ({
                                        (match (((&(*(self as
                                                         &token::NumberLiteral)
                                                       as
                                                       token::NumberLiteral)
                                                     as
                                                     &token::NumberLiteral),
                                                 (&(*(other as
                                                         &token::NumberLiteral)
                                                       as
                                                       token::NumberLiteral)
                                                     as
                                                     &token::NumberLiteral))
                                                   as
                                                   (&token::NumberLiteral, &token::NumberLiteral))
                                             {
                                             _ =>
                                             (::core::cmp::Ordering::Equal as
                                                 std::cmp::Ordering),
                                         } as std::cmp::Ordering)
                                    } as std::cmp::Ordering)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::hash::Hash for NumberLiteral {
        fn hash<__H: ::core::hash::Hasher>(self: &Self, state: &mut __H)
         ->
             () ({
                     (match (((&(*(self as &token::NumberLiteral) as
                                    token::NumberLiteral) as
                                  &token::NumberLiteral),) as
                                (&token::NumberLiteral,)) {
                          _ => { }
                      } as ())
                 } as ())
    }
    impl fmt::Display for NumberLiteral {
        fn fmt(self: &Self, fmt: &mut fmt::Formatter)
         ->
             fmt::Result ({
                              (match (*(self as &token::NumberLiteral) as
                                         token::NumberLiteral) {
                                   Self::Decimal =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("decimal"
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (()
                                                                                                                                                                                         as
                                                                                                                                                                                         ())
                                                                                                                                                                                   {
                                                                                                                                                                                   ()
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 0]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                               } as std::result::Result<(), std::fmt::Error>)
                          } as std::result::Result<(), std::fmt::Error>)
    }
    pub enum Kind {
        NumberLiteral {
            number: NumberLiteral,
        },
        Plus,
        Minus,
        Slash,
        Star,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Kind {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (((&(*(self as &token::Kind) as
                                                     token::Kind) as
                                                   &token::Kind),) as
                                                 (&token::Kind,)) {
                                           (&Kind::NumberLiteral {
                                            number: ref __self_0 },) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_struct(("NumberLiteral"
                                                                                                   as
                                                                                                   &str))
                                                       as
                                                       std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("number"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0
                                                                                               as
                                                                                               &token::NumberLiteral)
                                                                                             as
                                                                                             token::NumberLiteral)
                                                                                           as
                                                                                           &token::NumberLiteral)
                                                                                         as
                                                                                         &&token::NumberLiteral))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugStruct).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&Kind::Plus,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("Plus"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&Kind::Minus,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("Minus"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&Kind::Slash,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("Slash"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&Kind::Star,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("Star"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for Kind {
        #[inline]
        fn clone(self: &Self)
         ->
             Kind ({
                       ({
                            let _:
                                    ::core::clone::AssertParamIsClone<NumberLiteral>;
                            (*(self as &token::Kind) as token::Kind)
                        } as token::Kind)
                   } as token::Kind)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for Kind { }
    impl ::core::marker::StructuralPartialEq for Kind { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialEq for Kind {
        #[inline]
        fn eq(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          ((*(__self_0 as
                                                 &token::NumberLiteral) as
                                               token::NumberLiteral) ==
                                              (*(__arg_1_0 as
                                                    &token::NumberLiteral) as
                                                  token::NumberLiteral) as
                                              bool),
                                          _ => (true as bool),
                                      } as bool)
                                 }
                                 _ => { (false as bool) }
                             } as bool)
                        } as bool)
                   } as bool)
        #[inline]
        fn ne(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          ((*(__self_0 as
                                                 &token::NumberLiteral) as
                                               token::NumberLiteral) !=
                                              (*(__arg_1_0 as
                                                    &token::NumberLiteral) as
                                                  token::NumberLiteral) as
                                              bool),
                                          _ => (false as bool),
                                      } as bool)
                                 }
                                 _ => { (true as bool) }
                             } as bool)
                        } as bool)
                   } as bool)
    }
    impl ::core::marker::StructuralEq for Kind { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Eq for Kind {
        #[inline]
        #[doc(hidden)]
        fn assert_receiver_is_total_eq(self: &Self)
         ->
             () ({
                     ({ let _: ::core::cmp::AssertParamIsEq<NumberLiteral>; }
                         as ())
                 } as ())
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialOrd for Kind {
        #[inline]
        fn partial_cmp(self: &Self, other: &Kind)
         ->
             ::core::option::Option<::core::cmp::Ordering> ({
                                                                ({
                                                                     let __self_vi =
                                                                         (unsafe
                                                                          {
                                                                              ((::core::intrinsics::discriminant_value
                                                                                   as
                                                                                   for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                                                     &token::Kind)
                                                                                                                                                                                                                                                                   as
                                                                                                                                                                                                                                                                   token::Kind)
                                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                                 &token::Kind))
                                                                                  as
                                                                                  isize)
                                                                          } as
                                                                             isize);
                                                                     let __arg_1_vi =
                                                                         (unsafe
                                                                          {
                                                                              ((::core::intrinsics::discriminant_value
                                                                                   as
                                                                                   for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                                                     &token::Kind)
                                                                                                                                                                                                                                                                   as
                                                                                                                                                                                                                                                                   token::Kind)
                                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                                 &token::Kind))
                                                                                  as
                                                                                  isize)
                                                                          } as
                                                                             isize);
                                                                     (match ({
                                                                                 let _t =
                                                                                     ((true
                                                                                          as
                                                                                          bool)
                                                                                         &&
                                                                                         ((__self_vi
                                                                                              as
                                                                                              isize)
                                                                                             ==
                                                                                             (__arg_1_vi
                                                                                                 as
                                                                                                 isize)
                                                                                             as
                                                                                             bool)
                                                                                         as
                                                                                         bool);
                                                                                 _t
                                                                             }
                                                                                as
                                                                                bool)
                                                                          {
                                                                          (true
                                                                              as
                                                                              bool)
                                                                          => {
                                                                              (match (((&(*(self
                                                                                               as
                                                                                               &token::Kind)
                                                                                             as
                                                                                             token::Kind)
                                                                                           as
                                                                                           &token::Kind),
                                                                                       (&(*(other
                                                                                               as
                                                                                               &token::Kind)
                                                                                             as
                                                                                             token::Kind)
                                                                                           as
                                                                                           &token::Kind))
                                                                                         as
                                                                                         (&token::Kind, &token::Kind))
                                                                                   {
                                                                                   (&Kind::NumberLiteral {
                                                                                    number: ref __self_0
                                                                                    },
                                                                                    &Kind::NumberLiteral {
                                                                                    number: ref __arg_1_0
                                                                                    })
                                                                                   =>
                                                                                   (match ((::core::cmp::PartialOrd::partial_cmp
                                                                                               as
                                                                                               for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::option::Option<std::cmp::Ordering> {<token::NumberLiteral as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0
                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                    &token::NumberLiteral)
                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                  token::NumberLiteral)
                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                &token::NumberLiteral),
                                                                                                                                                                                                                                                                            (&(*(__arg_1_0
                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                    &token::NumberLiteral)
                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                  token::NumberLiteral)
                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                &token::NumberLiteral))
                                                                                              as
                                                                                              std::option::Option<std::cmp::Ordering>)
                                                                                        {
                                                                                        ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                        =>
                                                                                        ((::core::option::Option::Some
                                                                                             as
                                                                                             fn(std::cmp::Ordering) -> std::option::Option<std::cmp::Ordering> {std::option::Option::<std::cmp::Ordering>::Some})((::core::cmp::Ordering::Equal
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      std::cmp::Ordering))
                                                                                            as
                                                                                            std::option::Option<std::cmp::Ordering>),
                                                                                        cmp
                                                                                        =>
                                                                                        (cmp
                                                                                            as
                                                                                            std::option::Option<std::cmp::Ordering>),
                                                                                    }
                                                                                       as
                                                                                       std::option::Option<std::cmp::Ordering>),
                                                                                   _
                                                                                   =>
                                                                                   ((::core::option::Option::Some
                                                                                        as
                                                                                        fn(std::cmp::Ordering) -> std::option::Option<std::cmp::Ordering> {std::option::Option::<std::cmp::Ordering>::Some})((::core::cmp::Ordering::Equal
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 std::cmp::Ordering))
                                                                                       as
                                                                                       std::option::Option<std::cmp::Ordering>),
                                                                               }
                                                                                  as
                                                                                  std::option::Option<std::cmp::Ordering>)
                                                                          }
                                                                          _ =>
                                                                          {
                                                                              ((__self_vi
                                                                                   as
                                                                                   isize).partial_cmp((&(__arg_1_vi
                                                                                                            as
                                                                                                            isize)
                                                                                                          as
                                                                                                          &isize))
                                                                                  as
                                                                                  std::option::Option<std::cmp::Ordering>)
                                                                          }
                                                                      } as
                                                                         std::option::Option<std::cmp::Ordering>)
                                                                 } as
                                                                    std::option::Option<std::cmp::Ordering>)
                                                            } as
                                                               std::option::Option<std::cmp::Ordering>)
        #[inline]
        fn lt(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          (((::core::option::Option::unwrap_or
                                                as
                                                fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                                   as
                                                                                                                                                                                                   for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::option::Option<std::cmp::Ordering> {<token::NumberLiteral as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral),
                                                                                                                                                                                                                                                                                                                                                                                (&(*(__arg_1_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral))
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                              (::core::cmp::Ordering::Greater
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::cmp::Ordering))
                                               as std::cmp::Ordering) ==
                                              (::core::cmp::Ordering::Less as
                                                  std::cmp::Ordering) as
                                              bool),
                                          _ => (false as bool),
                                      } as bool)
                                 }
                                 _ => {
                                     ((__self_vi as
                                          isize).lt((&(__arg_1_vi as isize) as
                                                        &isize)) as bool)
                                 }
                             } as bool)
                        } as bool)
                   } as bool)
        #[inline]
        fn le(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          (((::core::option::Option::unwrap_or
                                                as
                                                fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                                   as
                                                                                                                                                                                                   for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::option::Option<std::cmp::Ordering> {<token::NumberLiteral as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral),
                                                                                                                                                                                                                                                                                                                                                                                (&(*(__arg_1_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral))
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                              (::core::cmp::Ordering::Greater
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::cmp::Ordering))
                                               as std::cmp::Ordering) !=
                                              (::core::cmp::Ordering::Greater
                                                  as std::cmp::Ordering) as
                                              bool),
                                          _ => (true as bool),
                                      } as bool)
                                 }
                                 _ => {
                                     ((__self_vi as
                                          isize).le((&(__arg_1_vi as isize) as
                                                        &isize)) as bool)
                                 }
                             } as bool)
                        } as bool)
                   } as bool)
        #[inline]
        fn gt(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          (((::core::option::Option::unwrap_or
                                                as
                                                fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                                   as
                                                                                                                                                                                                   for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::option::Option<std::cmp::Ordering> {<token::NumberLiteral as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral),
                                                                                                                                                                                                                                                                                                                                                                                (&(*(__arg_1_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral))
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                              (::core::cmp::Ordering::Less
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::cmp::Ordering))
                                               as std::cmp::Ordering) ==
                                              (::core::cmp::Ordering::Greater
                                                  as std::cmp::Ordering) as
                                              bool),
                                          _ => (false as bool),
                                      } as bool)
                                 }
                                 _ => {
                                     ((__self_vi as
                                          isize).gt((&(__arg_1_vi as isize) as
                                                        &isize)) as bool)
                                 }
                             } as bool)
                        } as bool)
                   } as bool)
        #[inline]
        fn ge(self: &Self, other: &Kind)
         ->
             bool ({
                       ({
                            let __self_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            let __arg_1_vi =
                                (unsafe {
                                     ((::core::intrinsics::discriminant_value
                                          as
                                          for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            &token::Kind)
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          token::Kind)
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::Kind))
                                         as isize)
                                 } as isize);
                            (match ({
                                        let _t =
                                            ((true as bool) &&
                                                ((__self_vi as isize) ==
                                                    (__arg_1_vi as isize) as
                                                    bool) as bool);
                                        _t
                                    } as bool) {
                                 (true as bool) => {
                                     (match (((&(*(self as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind),
                                              (&(*(other as &token::Kind) as
                                                    token::Kind) as
                                                  &token::Kind)) as
                                                (&token::Kind, &token::Kind))
                                          {
                                          (&Kind::NumberLiteral {
                                           number: ref __self_0 },
                                           &Kind::NumberLiteral {
                                           number: ref __arg_1_0 }) =>
                                          (((::core::option::Option::unwrap_or
                                                as
                                                fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                                   as
                                                                                                                                                                                                   for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::option::Option<std::cmp::Ordering> {<token::NumberLiteral as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral),
                                                                                                                                                                                                                                                                                                                                                                                (&(*(__arg_1_0
                                                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                                                    &token::NumberLiteral))
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                              (::core::cmp::Ordering::Less
                                                                                                                                                                                                  as
                                                                                                                                                                                                  std::cmp::Ordering))
                                               as std::cmp::Ordering) !=
                                              (::core::cmp::Ordering::Less as
                                                  std::cmp::Ordering) as
                                              bool),
                                          _ => (true as bool),
                                      } as bool)
                                 }
                                 _ => {
                                     ((__self_vi as
                                          isize).ge((&(__arg_1_vi as isize) as
                                                        &isize)) as bool)
                                 }
                             } as bool)
                        } as bool)
                   } as bool)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Ord for Kind {
        #[inline]
        fn cmp(self: &Self, other: &Kind)
         ->
             ::core::cmp::Ordering ({
                                        ({
                                             let __self_vi =
                                                 (unsafe {
                                                      ((::core::intrinsics::discriminant_value
                                                           as
                                                           for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(self
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             &token::Kind)
                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                           token::Kind)
                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                         &token::Kind))
                                                          as isize)
                                                  } as isize);
                                             let __arg_1_vi =
                                                 (unsafe {
                                                      ((::core::intrinsics::discriminant_value
                                                           as
                                                           for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((&(*(other
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             &token::Kind)
                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                           token::Kind)
                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                         &token::Kind))
                                                          as isize)
                                                  } as isize);
                                             (match ({
                                                         let _t =
                                                             ((true as bool)
                                                                 &&
                                                                 ((__self_vi
                                                                      as
                                                                      isize)
                                                                     ==
                                                                     (__arg_1_vi
                                                                         as
                                                                         isize)
                                                                     as bool)
                                                                 as bool);
                                                         _t
                                                     } as bool) {
                                                  (true as bool) => {
                                                      (match (((&(*(self as
                                                                       &token::Kind)
                                                                     as
                                                                     token::Kind)
                                                                   as
                                                                   &token::Kind),
                                                               (&(*(other as
                                                                       &token::Kind)
                                                                     as
                                                                     token::Kind)
                                                                   as
                                                                   &token::Kind))
                                                                 as
                                                                 (&token::Kind, &token::Kind))
                                                           {
                                                           (&Kind::NumberLiteral {
                                                            number: ref __self_0
                                                            },
                                                            &Kind::NumberLiteral {
                                                            number: ref __arg_1_0
                                                            }) =>
                                                           (match ((::core::cmp::Ord::cmp
                                                                       as
                                                                       for<'r, 's> fn(&'r token::NumberLiteral, &'s token::NumberLiteral) -> std::cmp::Ordering {<token::NumberLiteral as std::cmp::Ord>::cmp})((&(*(__self_0
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                    as
                                                                                                                                                                                                                    &token::NumberLiteral),
                                                                                                                                                                                                                (&(*(__arg_1_0
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        &token::NumberLiteral)
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      token::NumberLiteral)
                                                                                                                                                                                                                    as
                                                                                                                                                                                                                    &token::NumberLiteral))
                                                                      as
                                                                      std::cmp::Ordering)
                                                                {
                                                                ::core::cmp::Ordering::Equal
                                                                =>
                                                                (::core::cmp::Ordering::Equal
                                                                    as
                                                                    std::cmp::Ordering),
                                                                cmp =>
                                                                (cmp as
                                                                    std::cmp::Ordering),
                                                            } as
                                                               std::cmp::Ordering),
                                                           _ =>
                                                           (::core::cmp::Ordering::Equal
                                                               as
                                                               std::cmp::Ordering),
                                                       } as
                                                          std::cmp::Ordering)
                                                  }
                                                  _ => {
                                                      ((__self_vi as
                                                           isize).cmp((&(__arg_1_vi
                                                                            as
                                                                            isize)
                                                                          as
                                                                          &isize))
                                                          as
                                                          std::cmp::Ordering)
                                                  }
                                              } as std::cmp::Ordering)
                                         } as std::cmp::Ordering)
                                    } as std::cmp::Ordering)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::hash::Hash for Kind {
        fn hash<__H: ::core::hash::Hasher>(self: &Self, state: &mut __H)
         ->
             () ({
                     (match (((&(*(self as &token::Kind) as token::Kind) as
                                  &token::Kind),) as (&token::Kind,)) {
                          (&Kind::NumberLiteral { number: ref __self_0 },) =>
                          {
                              ((::core::hash::Hash::hash as
                                   for<'r, 's> fn(&'r isize, &'s mut __H) {<isize as std::hash::Hash>::hash::<__H>})((&(unsafe
                                                                                                                        {
                                                                                                                            ((::core::intrinsics::discriminant_value
                                                                                                                                 as
                                                                                                                                 for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((self
                                                                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                                                                               &token::Kind))
                                                                                                                                as
                                                                                                                                isize)
                                                                                                                        }
                                                                                                                           as
                                                                                                                           isize)
                                                                                                                         as
                                                                                                                         &isize),
                                                                                                                     (state
                                                                                                                         as
                                                                                                                         &mut __H))
                                  as ());
                              ((::core::hash::Hash::hash as
                                   for<'r, 's> fn(&'r token::NumberLiteral, &'s mut __H) {<token::NumberLiteral as std::hash::Hash>::hash::<__H>})((&(*(__self_0
                                                                                                                                                           as
                                                                                                                                                           &token::NumberLiteral)
                                                                                                                                                         as
                                                                                                                                                         token::NumberLiteral)
                                                                                                                                                       as
                                                                                                                                                       &token::NumberLiteral),
                                                                                                                                                   (state
                                                                                                                                                       as
                                                                                                                                                       &mut __H))
                                  as ())
                          }
                          _ => {
                              ((::core::hash::Hash::hash as
                                   for<'r, 's> fn(&'r isize, &'s mut __H) {<isize as std::hash::Hash>::hash::<__H>})((&(unsafe
                                                                                                                        {
                                                                                                                            ((::core::intrinsics::discriminant_value
                                                                                                                                 as
                                                                                                                                 for<'r> extern "rust-intrinsic" fn(&'r token::Kind) -> <token::Kind as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<token::Kind>})((self
                                                                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                                                                               &token::Kind))
                                                                                                                                as
                                                                                                                                isize)
                                                                                                                        }
                                                                                                                           as
                                                                                                                           isize)
                                                                                                                         as
                                                                                                                         &isize),
                                                                                                                     (state
                                                                                                                         as
                                                                                                                         &mut __H))
                                  as ())
                          }
                      } as ())
                 } as ())
    }
    impl fmt::Display for Kind {
        fn fmt(self: &Self, fmt: &mut fmt::Formatter)
         ->
             fmt::Result ({
                              (match (*(self as &token::Kind) as token::Kind)
                                   {
                                   Self::NumberLiteral { number } =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(""
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (((&(number
                                                                                                                                                                                             as
                                                                                                                                                                                             token::NumberLiteral)
                                                                                                                                                                                           as
                                                                                                                                                                                           &token::NumberLiteral),)
                                                                                                                                                                                         as
                                                                                                                                                                                         (&token::NumberLiteral,))
                                                                                                                                                                                   {
                                                                                                                                                                                   (arg0,)
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([((::core::fmt::ArgumentV1::new
                                                                                                                                                                                          as
                                                                                                                                                                                          for<'b> fn(&'b token::NumberLiteral, for<'r, 's, 't0> fn(&'r token::NumberLiteral, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<token::NumberLiteral>})((arg0
                                                                                                                                                                                                                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                                                                                                                                                                                                                 &token::NumberLiteral),
                                                                                                                                                                                                                                                                                                                                                                                                                                             (::core::fmt::Display::fmt
                                                                                                                                                                                                                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                                                                                                                                                                                                                 for<'r, 's, 't0> fn(&'r token::NumberLiteral, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<token::NumberLiteral as std::fmt::Display>::fmt}))
                                                                                                                                                                                         as
                                                                                                                                                                                         std::fmt::ArgumentV1)]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 1]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 1]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                                   Self::Plus =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("+"
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (()
                                                                                                                                                                                         as
                                                                                                                                                                                         ())
                                                                                                                                                                                   {
                                                                                                                                                                                   ()
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 0]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                                   Self::Minus =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("-"
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (()
                                                                                                                                                                                         as
                                                                                                                                                                                         ())
                                                                                                                                                                                   {
                                                                                                                                                                                   ()
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 0]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                                   Self::Slash =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("/"
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (()
                                                                                                                                                                                         as
                                                                                                                                                                                         ())
                                                                                                                                                                                   {
                                                                                                                                                                                   ()
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 0]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                                   Self::Star =>
                                   ((fmt as
                                        &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                 as
                                                                                 fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("*"
                                                                                                                                                                                    as
                                                                                                                                                                                    &str)]
                                                                                                                                                                                  as
                                                                                                                                                                                  [&str; 1])
                                                                                                                                                                                as
                                                                                                                                                                                &[&str; 1]),
                                                                                                                                                                            (&(match (()
                                                                                                                                                                                         as
                                                                                                                                                                                         ())
                                                                                                                                                                                   {
                                                                                                                                                                                   ()
                                                                                                                                                                                   =>
                                                                                                                                                                                   ([]
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                               }
                                                                                                                                                                                  as
                                                                                                                                                                                  [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                as
                                                                                                                                                                                &[std::fmt::ArgumentV1; 0]))
                                                                                as
                                                                                std::fmt::Arguments))
                                       as
                                       std::result::Result<(), std::fmt::Error>),
                               } as std::result::Result<(), std::fmt::Error>)
                          } as std::result::Result<(), std::fmt::Error>)
    }
    pub struct Token {
        pub kind: Kind,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Token {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (*(self as &token::Token) as
                                                 token::Token) {
                                           Token { kind: ref __self_0_0 } => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_struct(("Token"
                                                                                                   as
                                                                                                   &str))
                                                       as
                                                       std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("kind"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0_0
                                                                                               as
                                                                                               &token::Kind)
                                                                                             as
                                                                                             token::Kind)
                                                                                           as
                                                                                           &token::Kind)
                                                                                         as
                                                                                         &&token::Kind))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugStruct).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for Token {
        #[inline]
        fn clone(self: &Self)
         ->
             Token ({
                        ({
                             let _: ::core::clone::AssertParamIsClone<Kind>;
                             (*(self as &token::Token) as token::Token)
                         } as token::Token)
                    } as token::Token)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for Token { }
    impl ::core::marker::StructuralPartialEq for Token { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialEq for Token {
        #[inline]
        fn eq(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 ((*(__self_0_0 as &token::Kind) as
                                      token::Kind) ==
                                     (*(__self_1_0 as &token::Kind) as
                                         token::Kind) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
        #[inline]
        fn ne(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 ((*(__self_0_0 as &token::Kind) as
                                      token::Kind) !=
                                     (*(__self_1_0 as &token::Kind) as
                                         token::Kind) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
    }
    impl ::core::marker::StructuralEq for Token { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Eq for Token {
        #[inline]
        #[doc(hidden)]
        fn assert_receiver_is_total_eq(self: &Self)
         ->
             () ({ ({ let _: ::core::cmp::AssertParamIsEq<Kind>; } as ()) } as
                    ())
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialOrd for Token {
        #[inline]
        fn partial_cmp(self: &Self, other: &Token)
         ->
             ::core::option::Option<::core::cmp::Ordering> ({
                                                                (match (*(other
                                                                             as
                                                                             &token::Token)
                                                                           as
                                                                           token::Token)
                                                                     {
                                                                     Token {
                                                                     kind: ref __self_1_0
                                                                     } =>
                                                                     (match (*(self
                                                                                  as
                                                                                  &token::Token)
                                                                                as
                                                                                token::Token)
                                                                          {
                                                                          Token {
                                                                          kind: ref __self_0_0
                                                                          } =>
                                                                          (match ((::core::cmp::PartialOrd::partial_cmp
                                                                                      as
                                                                                      for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::option::Option<std::cmp::Ordering> {<token::Kind as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0_0
                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                &token::Kind)
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              token::Kind)
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            &token::Kind),
                                                                                                                                                                                                                                        (&(*(__self_1_0
                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                &token::Kind)
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              token::Kind)
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            &token::Kind))
                                                                                     as
                                                                                     std::option::Option<std::cmp::Ordering>)
                                                                               {
                                                                               ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                               =>
                                                                               ((::core::option::Option::Some
                                                                                    as
                                                                                    fn(std::cmp::Ordering) -> std::option::Option<std::cmp::Ordering> {std::option::Option::<std::cmp::Ordering>::Some})((::core::cmp::Ordering::Equal
                                                                                                                                                                                                             as
                                                                                                                                                                                                             std::cmp::Ordering))
                                                                                   as
                                                                                   std::option::Option<std::cmp::Ordering>),
                                                                               cmp
                                                                               =>
                                                                               (cmp
                                                                                   as
                                                                                   std::option::Option<std::cmp::Ordering>),
                                                                           }
                                                                              as
                                                                              std::option::Option<std::cmp::Ordering>),
                                                                      } as
                                                                         std::option::Option<std::cmp::Ordering>),
                                                                 } as
                                                                    std::option::Option<std::cmp::Ordering>)
                                                            } as
                                                               std::option::Option<std::cmp::Ordering>)
        #[inline]
        fn lt(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 (((::core::option::Option::unwrap_or as
                                       fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                          as
                                                                                                                                                                                          for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::option::Option<std::cmp::Ordering> {<token::Kind as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind),
                                                                                                                                                                                                                                                                                                                                            (&(*(__self_1_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind))
                                                                                                                                                                                         as
                                                                                                                                                                                         std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                     (::core::cmp::Ordering::Greater
                                                                                                                                                                                         as
                                                                                                                                                                                         std::cmp::Ordering))
                                      as std::cmp::Ordering) ==
                                     (::core::cmp::Ordering::Less as
                                         std::cmp::Ordering) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
        #[inline]
        fn le(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 (((::core::option::Option::unwrap_or as
                                       fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                          as
                                                                                                                                                                                          for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::option::Option<std::cmp::Ordering> {<token::Kind as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind),
                                                                                                                                                                                                                                                                                                                                            (&(*(__self_1_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind))
                                                                                                                                                                                         as
                                                                                                                                                                                         std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                     (::core::cmp::Ordering::Greater
                                                                                                                                                                                         as
                                                                                                                                                                                         std::cmp::Ordering))
                                      as std::cmp::Ordering) !=
                                     (::core::cmp::Ordering::Greater as
                                         std::cmp::Ordering) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
        #[inline]
        fn gt(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 (((::core::option::Option::unwrap_or as
                                       fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                          as
                                                                                                                                                                                          for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::option::Option<std::cmp::Ordering> {<token::Kind as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind),
                                                                                                                                                                                                                                                                                                                                            (&(*(__self_1_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind))
                                                                                                                                                                                         as
                                                                                                                                                                                         std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                     (::core::cmp::Ordering::Less
                                                                                                                                                                                         as
                                                                                                                                                                                         std::cmp::Ordering))
                                      as std::cmp::Ordering) ==
                                     (::core::cmp::Ordering::Greater as
                                         std::cmp::Ordering) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
        #[inline]
        fn ge(self: &Self, other: &Token)
         ->
             bool ({
                       (match (*(other as &token::Token) as token::Token) {
                            Token { kind: ref __self_1_0 } =>
                            (match (*(self as &token::Token) as token::Token)
                                 {
                                 Token { kind: ref __self_0_0 } =>
                                 (((::core::option::Option::unwrap_or as
                                       fn(std::option::Option<std::cmp::Ordering>, std::cmp::Ordering) -> std::cmp::Ordering {std::option::Option::<std::cmp::Ordering>::unwrap_or})(((::core::cmp::PartialOrd::partial_cmp
                                                                                                                                                                                          as
                                                                                                                                                                                          for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::option::Option<std::cmp::Ordering> {<token::Kind as std::cmp::PartialOrd>::partial_cmp})((&(*(__self_0_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind),
                                                                                                                                                                                                                                                                                                                                            (&(*(__self_1_0
                                                                                                                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                                                                                                                &token::Kind))
                                                                                                                                                                                         as
                                                                                                                                                                                         std::option::Option<std::cmp::Ordering>),
                                                                                                                                                                                     (::core::cmp::Ordering::Less
                                                                                                                                                                                         as
                                                                                                                                                                                         std::cmp::Ordering))
                                      as std::cmp::Ordering) !=
                                     (::core::cmp::Ordering::Less as
                                         std::cmp::Ordering) as bool),
                             } as bool),
                        } as bool)
                   } as bool)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Ord for Token {
        #[inline]
        fn cmp(self: &Self, other: &Token)
         ->
             ::core::cmp::Ordering ({
                                        (match (*(other as &token::Token) as
                                                   token::Token) {
                                             Token { kind: ref __self_1_0 } =>
                                             (match (*(self as &token::Token)
                                                        as token::Token) {
                                                  Token { kind: ref __self_0_0
                                                  } =>
                                                  (match ((::core::cmp::Ord::cmp
                                                              as
                                                              for<'r, 's> fn(&'r token::Kind, &'s token::Kind) -> std::cmp::Ordering {<token::Kind as std::cmp::Ord>::cmp})((&(*(__self_0_0
                                                                                                                                                                                    as
                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                  as
                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                as
                                                                                                                                                                                &token::Kind),
                                                                                                                                                                            (&(*(__self_1_0
                                                                                                                                                                                    as
                                                                                                                                                                                    &token::Kind)
                                                                                                                                                                                  as
                                                                                                                                                                                  token::Kind)
                                                                                                                                                                                as
                                                                                                                                                                                &token::Kind))
                                                             as
                                                             std::cmp::Ordering)
                                                       {
                                                       ::core::cmp::Ordering::Equal
                                                       =>
                                                       (::core::cmp::Ordering::Equal
                                                           as
                                                           std::cmp::Ordering),
                                                       cmp =>
                                                       (cmp as
                                                           std::cmp::Ordering),
                                                   } as std::cmp::Ordering),
                                              } as std::cmp::Ordering),
                                         } as std::cmp::Ordering)
                                    } as std::cmp::Ordering)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::hash::Hash for Token {
        fn hash<__H: ::core::hash::Hasher>(self: &Self, state: &mut __H)
         ->
             () ({
                     (match (*(self as &token::Token) as token::Token) {
                          Token { kind: ref __self_0_0 } => {
                              ((::core::hash::Hash::hash as
                                   for<'r, 's> fn(&'r token::Kind, &'s mut __H) {<token::Kind as std::hash::Hash>::hash::<__H>})((&(*(__self_0_0
                                                                                                                                         as
                                                                                                                                         &token::Kind)
                                                                                                                                       as
                                                                                                                                       token::Kind)
                                                                                                                                     as
                                                                                                                                     &token::Kind),
                                                                                                                                 (state
                                                                                                                                     as
                                                                                                                                     &mut __H))
                                  as ())
                          }
                      } as ())
                 } as ())
    }
}
mod error {
    use crate::token::Kind;
    use thiserror::Error;
    pub type Result<T, E = Error> = std::result::Result<T, E>;
    pub enum Error {

        /// Source parse error.
        #[error("parse error")]
        ParseError(
                   #[from]
                   ParseError),
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Error {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (((&(*(self as &error::Error) as
                                                     error::Error) as
                                                   &error::Error),) as
                                                 (&error::Error,)) {
                                           (&Error::ParseError(ref __self_0),)
                                           => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("ParseError"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugTuple).field((&(&(*(__self_0
                                                                                              as
                                                                                              &error::ParseError)
                                                                                            as
                                                                                            error::ParseError)
                                                                                          as
                                                                                          &error::ParseError)
                                                                                        as
                                                                                        &&error::ParseError))
                                                       as
                                                       &mut std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[allow(unused_qualifications)]
    impl std::error::Error for Error {
        fn source(self: &Self)
         ->
             std::option::Option<&std::error::Error +
                                  'static> ({
                                                use thiserror::private::AsDynError;

                                                #[allow(deprecated)]
                                                (match (self as &error::Error)
                                                     {
                                                     Error::ParseError {
                                                     0: source, .. } =>
                                                     ((std::option::Option::Some
                                                          as
                                                          fn(&dyn std::error::Error) -> std::option::Option<&dyn std::error::Error> {std::option::Option::<&dyn std::error::Error>::Some})(((source
                                                                                                                                                                                                as
                                                                                                                                                                                                &error::ParseError).as_dyn_error()
                                                                                                                                                                                               as
                                                                                                                                                                                               &dyn std::error::Error))
                                                         as
                                                         std::option::Option<&dyn std::error::Error>),
                                                 } as
                                                    std::option::Option<&dyn std::error::Error>)
                                            } as
                                               std::option::Option<&dyn std::error::Error>)
    }
    #[allow(unused_qualifications)]
    impl std::fmt::Display for Error {
        fn fmt(self: &Self, __formatter: &mut std::fmt::Formatter)
         ->
             std::fmt::Result ({

                                   #[allow(unused_variables, deprecated,
                                           clippy :: used_underscore_binding)]
                                   (match (self as &error::Error) {
                                        Error::ParseError(_0) =>
                                        ((__formatter as
                                             &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                      as
                                                                                      fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("parse error"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str)]
                                                                                                                                                                                       as
                                                                                                                                                                                       [&str; 1])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[&str; 1]),
                                                                                                                                                                                 (&(match (()
                                                                                                                                                                                              as
                                                                                                                                                                                              ())
                                                                                                                                                                                        {
                                                                                                                                                                                        ()
                                                                                                                                                                                        =>
                                                                                                                                                                                        ([]
                                                                                                                                                                                            as
                                                                                                                                                                                            [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                                    }
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[std::fmt::ArgumentV1; 0]))
                                                                                     as
                                                                                     std::fmt::Arguments))
                                            as
                                            std::result::Result<(), std::fmt::Error>),
                                    } as
                                       std::result::Result<(), std::fmt::Error>)
                               } as std::result::Result<(), std::fmt::Error>)
    }
    #[allow(unused_qualifications)]
    impl std::convert::From<ParseError> for Error {
        #[allow(deprecated)]
        fn from(source: ParseError)
         ->
             Self ({
                       (Error::ParseError{0: (source as error::ParseError),}
                           as error::Error)
                   } as error::Error)
    }
    pub enum ParseError {

        #[error("unexpected end-of-file")]
        UnexpectedEof,

        #[error("unexpected character `{c}`")]
        UnexpectedChar {
            c: char,
        },

        #[error("token mismatch, expected `{expected}` but was `{actual}`")]
        TokenMismatch {
            expected: Kind,
            actual: Kind,
        },
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for ParseError {
        fn fmt(self: &Self, f: &mut ::core::fmt::Formatter)
         ->
             ::core::fmt::Result ({
                                      (match (((&(*(self as
                                                       &error::ParseError) as
                                                     error::ParseError) as
                                                   &error::ParseError),) as
                                                 (&error::ParseError,)) {
                                           (&ParseError::UnexpectedEof,) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_tuple(("UnexpectedEof"
                                                                                                  as
                                                                                                  &str))
                                                       as
                                                       std::fmt::DebugTuple);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugTuple).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&ParseError::UnexpectedChar {
                                            c: ref __self_0 },) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_struct(("UnexpectedChar"
                                                                                                   as
                                                                                                   &str))
                                                       as
                                                       std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("c"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0
                                                                                               as
                                                                                               &char)
                                                                                             as
                                                                                             char)
                                                                                           as
                                                                                           &char)
                                                                                         as
                                                                                         &&char))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugStruct).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                           (&ParseError::TokenMismatch {
                                            expected: ref __self_0,
                                            actual: ref __self_1 },) => {
                                               let mut debug_trait_builder =
                                                   ((f as
                                                        &mut std::fmt::Formatter).debug_struct(("TokenMismatch"
                                                                                                   as
                                                                                                   &str))
                                                       as
                                                       std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("expected"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_0
                                                                                               as
                                                                                               &token::Kind)
                                                                                             as
                                                                                             token::Kind)
                                                                                           as
                                                                                           &token::Kind)
                                                                                         as
                                                                                         &&token::Kind))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               let _ =
                                                   ((debug_trait_builder as
                                                        std::fmt::DebugStruct).field(("actual"
                                                                                         as
                                                                                         &str),
                                                                                     (&(&(*(__self_1
                                                                                               as
                                                                                               &token::Kind)
                                                                                             as
                                                                                             token::Kind)
                                                                                           as
                                                                                           &token::Kind)
                                                                                         as
                                                                                         &&token::Kind))
                                                       as
                                                       &mut std::fmt::DebugStruct);
                                               ((debug_trait_builder as
                                                    std::fmt::DebugStruct).finish()
                                                   as
                                                   std::result::Result<(), std::fmt::Error>)
                                           }
                                       } as
                                          std::result::Result<(), std::fmt::Error>)
                                  } as
                                     std::result::Result<(), std::fmt::Error>)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for ParseError {
        #[inline]
        fn clone(self: &Self)
         ->
             ParseError ({
                             ({
                                  let _:
                                          ::core::clone::AssertParamIsClone<char>;
                                  let _:
                                          ::core::clone::AssertParamIsClone<Kind>;
                                  let _:
                                          ::core::clone::AssertParamIsClone<Kind>;
                                  (*(self as &error::ParseError) as
                                      error::ParseError)
                              } as error::ParseError)
                         } as error::ParseError)
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for ParseError { }
    #[allow(unused_qualifications)]
    impl std::error::Error for ParseError { }
    #[allow(unused_qualifications)]
    impl std::fmt::Display for ParseError {
        fn fmt(self: &Self, __formatter: &mut std::fmt::Formatter)
         ->
             std::fmt::Result ({
                                   #[allow(unused_imports)]
                                   use thiserror::private::{};
                                   #[allow(unused_imports)]
                                   use thiserror::private::DisplayAsDisplay;
                                   #[allow(unused_imports)]
                                   use thiserror::private::PathAsDisplay;

                                   #[allow(unused_variables, deprecated,
                                           clippy :: used_underscore_binding)]
                                   (match (self as &error::ParseError) {
                                        ParseError::UnexpectedEof {  } =>
                                        ((__formatter as
                                             &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                      as
                                                                                      fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("unexpected end-of-file"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str)]
                                                                                                                                                                                       as
                                                                                                                                                                                       [&str; 1])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[&str; 1]),
                                                                                                                                                                                 (&(match (()
                                                                                                                                                                                              as
                                                                                                                                                                                              ())
                                                                                                                                                                                        {
                                                                                                                                                                                        ()
                                                                                                                                                                                        =>
                                                                                                                                                                                        ([]
                                                                                                                                                                                            as
                                                                                                                                                                                            [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                                    }
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[std::fmt::ArgumentV1; 0]))
                                                                                     as
                                                                                     std::fmt::Arguments))
                                            as
                                            std::result::Result<(), std::fmt::Error>),
                                        ParseError::UnexpectedChar { c } =>
                                        ((__formatter as
                                             &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                      as
                                                                                      fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("unexpected character `"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str),
                                                                                                                                                                                     ("`"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str)]
                                                                                                                                                                                       as
                                                                                                                                                                                       [&str; 2])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[&str; 2]),
                                                                                                                                                                                 (&(match (((&((c
                                                                                                                                                                                                   as
                                                                                                                                                                                                   &char).as_display()
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &char)
                                                                                                                                                                                                as
                                                                                                                                                                                                &&char),)
                                                                                                                                                                                              as
                                                                                                                                                                                              (&&char,))
                                                                                                                                                                                        {
                                                                                                                                                                                        (arg0,)
                                                                                                                                                                                        =>
                                                                                                                                                                                        ([((::core::fmt::ArgumentV1::new
                                                                                                                                                                                               as
                                                                                                                                                                                               for<'b> fn(&'b &char, for<'r, 's, 't0> fn(&'r &char, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&char>})((arg0
                                                                                                                                                                                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                                                                                                                                                                                         &&char),
                                                                                                                                                                                                                                                                                                                                                                                                     (::core::fmt::Display::fmt
                                                                                                                                                                                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                                                                                                                                                                                         for<'r, 's, 't0> fn(&'r &char, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&char as std::fmt::Display>::fmt}))
                                                                                                                                                                                              as
                                                                                                                                                                                              std::fmt::ArgumentV1)]
                                                                                                                                                                                            as
                                                                                                                                                                                            [std::fmt::ArgumentV1; 1]),
                                                                                                                                                                                    }
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 1])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[std::fmt::ArgumentV1; 1]))
                                                                                     as
                                                                                     std::fmt::Arguments))
                                            as
                                            std::result::Result<(), std::fmt::Error>),
                                        ParseError::TokenMismatch {
                                        expected, actual } =>
                                        ((__formatter as
                                             &mut std::fmt::Formatter).write_fmt(((::core::fmt::Arguments::new_v1
                                                                                      as
                                                                                      fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("token mismatch, expected `"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str),
                                                                                                                                                                                     ("` but was `"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str),
                                                                                                                                                                                     ("`"
                                                                                                                                                                                         as
                                                                                                                                                                                         &str)]
                                                                                                                                                                                       as
                                                                                                                                                                                       [&str; 3])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[&str; 3]),
                                                                                                                                                                                 (&(match (((&((expected
                                                                                                                                                                                                   as
                                                                                                                                                                                                   &token::Kind).as_display()
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &token::Kind)
                                                                                                                                                                                                as
                                                                                                                                                                                                &&token::Kind),
                                                                                                                                                                                            (&((actual
                                                                                                                                                                                                   as
                                                                                                                                                                                                   &token::Kind).as_display()
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &token::Kind)
                                                                                                                                                                                                as
                                                                                                                                                                                                &&token::Kind))
                                                                                                                                                                                              as
                                                                                                                                                                                              (&&token::Kind, &&token::Kind))
                                                                                                                                                                                        {
                                                                                                                                                                                        (arg0,
                                                                                                                                                                                         arg1)
                                                                                                                                                                                        =>
                                                                                                                                                                                        ([((::core::fmt::ArgumentV1::new
                                                                                                                                                                                               as
                                                                                                                                                                                               for<'b> fn(&'b &token::Kind, for<'r, 's, 't0> fn(&'r &token::Kind, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&token::Kind>})((arg0
                                                                                                                                                                                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                                                                                                                                                                                              &&token::Kind),
                                                                                                                                                                                                                                                                                                                                                                                                                          (::core::fmt::Display::fmt
                                                                                                                                                                                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                                                                                                                                                                                              for<'r, 's, 't0> fn(&'r &token::Kind, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&token::Kind as std::fmt::Display>::fmt}))
                                                                                                                                                                                              as
                                                                                                                                                                                              std::fmt::ArgumentV1),
                                                                                                                                                                                          ((::core::fmt::ArgumentV1::new
                                                                                                                                                                                               as
                                                                                                                                                                                               for<'b> fn(&'b &token::Kind, for<'r, 's, 't0> fn(&'r &token::Kind, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&token::Kind>})((arg1
                                                                                                                                                                                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                                                                                                                                                                                              &&token::Kind),
                                                                                                                                                                                                                                                                                                                                                                                                                          (::core::fmt::Display::fmt
                                                                                                                                                                                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                                                                                                                                                                                              for<'r, 's, 't0> fn(&'r &token::Kind, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&token::Kind as std::fmt::Display>::fmt}))
                                                                                                                                                                                              as
                                                                                                                                                                                              std::fmt::ArgumentV1)]
                                                                                                                                                                                            as
                                                                                                                                                                                            [std::fmt::ArgumentV1; 2]),
                                                                                                                                                                                    }
                                                                                                                                                                                       as
                                                                                                                                                                                       [std::fmt::ArgumentV1; 2])
                                                                                                                                                                                     as
                                                                                                                                                                                     &[std::fmt::ArgumentV1; 2]))
                                                                                     as
                                                                                     std::fmt::Arguments))
                                            as
                                            std::result::Result<(), std::fmt::Error>),
                                    } as
                                       std::result::Result<(), std::fmt::Error>)
                               } as std::result::Result<(), std::fmt::Error>)
    }
}
use std::io;
use io::Write;
pub use crate::lexer::Lexer;
fn main()
 ->
     io::Result<()> ({
                         ((::std::io::_print as
                              for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print})(((::core::fmt::Arguments::new_v1
                                                                                          as
                                                                                          fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("> "
                                                                                                                                                                                             as
                                                                                                                                                                                             &str)]
                                                                                                                                                                                           as
                                                                                                                                                                                           [&str; 1])
                                                                                                                                                                                         as
                                                                                                                                                                                         &[&str; 1]),
                                                                                                                                                                                     (&(match (()
                                                                                                                                                                                                  as
                                                                                                                                                                                                  ())
                                                                                                                                                                                            {
                                                                                                                                                                                            ()
                                                                                                                                                                                            =>
                                                                                                                                                                                            ([]
                                                                                                                                                                                                as
                                                                                                                                                                                                [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                                        }
                                                                                                                                                                                           as
                                                                                                                                                                                           [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                         as
                                                                                                                                                                                         &[std::fmt::ArgumentV1; 0]))
                                                                                         as
                                                                                         std::fmt::Arguments))
                             as ());
                         ((((io::stdout as
                                fn() -> std::io::Stdout {std::io::stdout})()
                               as std::io::Stdout).flush() as
                              std::result::Result<(), std::io::Error>).unwrap()
                             as ());
                         let mut input =
                             ((String::new as
                                  fn() -> std::string::String {std::string::String::new})()
                                 as std::string::String);
                         (match ((::std::ops::Try::into_result as
                                     fn(std::result::Result<usize, std::io::Error>) -> std::result::Result<<std::result::Result<usize, std::io::Error> as std::ops::Try>::Ok, <std::result::Result<usize, std::io::Error> as std::ops::Try>::Error> {<std::result::Result<usize, std::io::Error> as std::ops::Try>::into_result})((((io::stdin
                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                        fn() -> std::io::Stdin {std::io::stdin})()
                                                                                                                                                                                                                                                                                                                                       as
                                                                                                                                                                                                                                                                                                                                       std::io::Stdin).read_line((&mut (input
                                                                                                                                                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                                                                                                                                                           std::string::String)
                                                                                                                                                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                                                                                                                                                     &mut std::string::String))
                                                                                                                                                                                                                                                                                                                                      as
                                                                                                                                                                                                                                                                                                                                      std::result::Result<usize, std::io::Error>))
                                    as
                                    std::result::Result<usize, std::io::Error>)
                              {
                              ::std::result::Result::Err(err) =>
                                  #[allow(unreachable_code)]
                                  (return ((::std::ops::Try::from_error as
                                               fn(<std::result::Result<(), std::io::Error> as std::ops::Try>::Error) -> std::result::Result<(), std::io::Error> {<std::result::Result<(), std::io::Error> as std::ops::Try>::from_error})(((::std::convert::From::from
                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                               fn(std::io::Error) -> std::io::Error {<std::io::Error as std::convert::From<std::io::Error>>::from})((err
                                                                                                                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                                                                                                                        std::io::Error))
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              std::io::Error))
                                              as
                                              std::result::Result<(), std::io::Error>)
                                      as !),
                              ::std::result::Result::Ok(val) =>
                                  #[allow(unreachable_code)]
                                  (val as usize),
                          } as usize);
                         (match (((Lexer::new as
                                      fn(&str) -> lexer::Lexer {lexer::Lexer::new})((&(input
                                                                                          as
                                                                                          std::string::String)
                                                                                        as
                                                                                        &std::string::String))
                                     as lexer::Lexer).next() as
                                    std::result::Result<std::option::Option<token::Token>, error::ParseError>)
                              {
                              Ok(Some(token)) => {
                                  ((::std::io::_print as
                                       for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print})(((::core::fmt::Arguments::new_v1
                                                                                                   as
                                                                                                   fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(""
                                                                                                                                                                                                      as
                                                                                                                                                                                                      &str),
                                                                                                                                                                                                  ("\n"
                                                                                                                                                                                                      as
                                                                                                                                                                                                      &str)]
                                                                                                                                                                                                    as
                                                                                                                                                                                                    [&str; 2])
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &[&str; 2]),
                                                                                                                                                                                              (&(match (((&(token
                                                                                                                                                                                                               as
                                                                                                                                                                                                               token::Token)
                                                                                                                                                                                                             as
                                                                                                                                                                                                             &token::Token),)
                                                                                                                                                                                                           as
                                                                                                                                                                                                           (&token::Token,))
                                                                                                                                                                                                     {
                                                                                                                                                                                                     (arg0,)
                                                                                                                                                                                                     =>
                                                                                                                                                                                                     ([((::core::fmt::ArgumentV1::new
                                                                                                                                                                                                            as
                                                                                                                                                                                                            for<'b> fn(&'b token::Token, for<'r, 's, 't0> fn(&'r token::Token, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<token::Token>})((arg0
                                                                                                                                                                                                                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                                                                                                                                                                                                                           &token::Token),
                                                                                                                                                                                                                                                                                                                                                                                                                                       (::core::fmt::Debug::fmt
                                                                                                                                                                                                                                                                                                                                                                                                                                           as
                                                                                                                                                                                                                                                                                                                                                                                                                                           for<'r, 's, 't0> fn(&'r token::Token, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<token::Token as std::fmt::Debug>::fmt}))
                                                                                                                                                                                                           as
                                                                                                                                                                                                           std::fmt::ArgumentV1)]
                                                                                                                                                                                                         as
                                                                                                                                                                                                         [std::fmt::ArgumentV1; 1]),
                                                                                                                                                                                                 }
                                                                                                                                                                                                    as
                                                                                                                                                                                                    [std::fmt::ArgumentV1; 1])
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &[std::fmt::ArgumentV1; 1]))
                                                                                                  as
                                                                                                  std::fmt::Arguments))
                                      as ());
                              }
                              _ => {
                                  ((::std::io::_print as
                                       for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print})(((::core::fmt::Arguments::new_v1
                                                                                                   as
                                                                                                   fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("whatwhatwhat\n"
                                                                                                                                                                                                      as
                                                                                                                                                                                                      &str)]
                                                                                                                                                                                                    as
                                                                                                                                                                                                    [&str; 1])
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &[&str; 1]),
                                                                                                                                                                                              (&(match (()
                                                                                                                                                                                                           as
                                                                                                                                                                                                           ())
                                                                                                                                                                                                     {
                                                                                                                                                                                                     ()
                                                                                                                                                                                                     =>
                                                                                                                                                                                                     ([]
                                                                                                                                                                                                         as
                                                                                                                                                                                                         [std::fmt::ArgumentV1; 0]),
                                                                                                                                                                                                 }
                                                                                                                                                                                                    as
                                                                                                                                                                                                    [std::fmt::ArgumentV1; 0])
                                                                                                                                                                                                  as
                                                                                                                                                                                                  &[std::fmt::ArgumentV1; 0]))
                                                                                                  as
                                                                                                  std::fmt::Arguments))
                                      as ());
                              }
                          } as ())
                         ((Ok as
                              fn(()) -> std::result::Result<(), std::io::Error> {std::result::Result::<(), std::io::Error>::Ok})((()
                                                                                                                                     as
                                                                                                                                     ()))
                             as std::result::Result<(), std::io::Error>)
                     } as std::result::Result<(), std::io::Error>)
